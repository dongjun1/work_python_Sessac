if / elif / else

if expr1:
    code_block_1_line_1
    code_block_1_line_2
    code_block_1_line_3
    code_block_1_line_4

elif expr2:
    code_block_2_line_1
    code_block_2_line_2
    code_block_2_line_3
    code_block_2_line_4
else:
    code_block_3_line_1
    code_block_3_line_2
    code_block_3_line_3
    code_block_3_line_4

new_code_block


loop - for / while / continue / break
# in 뒤에 오는 객체는 간단히 생각해서 subscription이 가능한 객체여야 함.
for var in some_list_like_thing:
    code_block_1_line_1
    code_block_1_line_2
    code_block_1_line_3

new_code_block

for a in [1, 2, 3, 4, 5, 6, 7]:
    if a % 2 == 0:
        continue # 객체의 다음 순번으로 넘어감. 따라서 assert 실행 X
        assert False
    print(a*4)

while expr:
    code_block_1_line_1

new_code_block

# loop - else -> 시험 X
for x in range(10):
    if x % 2 == 0:
        break
    print(x)
else:
    print('all done of for-loop')

list_comprehension
y = range(4)
res = list(a + b for a, b in enumerate(y))
res = {a:b for a, b in enumerate(y)}
res = []

# * : 일정한 주소값을 가진 하나의 리스트 or 튜플 같은 것을 언패킹
# ** : *에 해당하는 리스트 or 튜플이 쌍으로 묶여있는 것을 언패킹. **는 서로 연관관계가 있을 경우에만 가능. 대표적으로 dict
a = [1, 2, 3]
b = [4, 5, 6]
c = [*a, *b]

d = {1:2, 3:4, 5:6}
e = {7:8, 9:10}
f = {**d, **e}

for x in y:
    res.append(z)

[z for x in y]

# 함수를 다른 함수의 인자로 전달할 경우에 유용.
# def
lambda_function

lambda x:y

def f(x):
    return y


# class
# class 는 class 내의 code_block의 이름을 관리하고 있음.
# 
class A:
    b = 1


2~3문제 - 파이썬 기초 문법: list, dictionary, for , enumerate, if/else 알면 맞출 수 있는 print 결과/순서 맞추기
1문제 - return / print의 차이를 알면  풀 수 있는 print 결과/순서 맞추기
1문제 - 재귀:tree에서 str메서드 빈칸 채우기
1문제 - insertion sort 빈칸 채우기 (function_practice의 sort3)